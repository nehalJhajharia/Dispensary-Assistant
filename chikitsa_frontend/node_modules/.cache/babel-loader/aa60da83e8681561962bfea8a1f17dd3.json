{"ast":null,"code":"var _jsxFileName = \"/Users/nehaljhajharia/Desktop/Chikitsa/chikitsa_frontend/src/TestList.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport TestListView from './views/TestListView';\nimport useTestsForPatient from './data/TestsForPatient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction TestList() {\n  _s2();\n  var _s = $RefreshSig$();\n  const [loading, setLoading] = useState(true);\n  const [testList, setTestList] = useState([]);\n  const fetchTestList = async () => {\n    _s();\n    try {\n      const fetchedTestList = await useTestsForPatient();\n      setTestList(fetchedTestList);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error fetching test list:', error);\n    }\n  };\n  _s(fetchTestList, \"3ukCIM945HI1b6KMH0Uhs8WGoRQ=\", false, function () {\n    return [useTestsForPatient];\n  });\n  useEffect(() => {\n    fetchTestList();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading test list...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(TestListView, {\n      test_list: testList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s2(TestList, \"BHnR0E5k09/oU+T3FmrA+zW677U=\");\n_c = TestList;\nexport default TestList;\nvar _c;\n$RefreshReg$(_c, \"TestList\");","map":{"version":3,"names":["React","useState","useEffect","TestListView","useTestsForPatient","jsxDEV","_jsxDEV","Fragment","_Fragment","TestList","_s2","_s","$RefreshSig$","loading","setLoading","testList","setTestList","fetchTestList","fetchedTestList","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","test_list","_c","$RefreshReg$"],"sources":["/Users/nehaljhajharia/Desktop/Chikitsa/chikitsa_frontend/src/TestList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport TestListView from './views/TestListView';\nimport useTestsForPatient from './data/TestsForPatient';\n\nfunction TestList() {\n  const [loading, setLoading] = useState(true);\n  const [testList, setTestList] = useState([]);\n\n  const fetchTestList = async () => {\n    try {\n      const fetchedTestList = await useTestsForPatient();\n      setTestList(fetchedTestList);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error fetching test list:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchTestList();\n  }, []);\n\n  return (\n    <>\n      {loading ? (\n        <p>Loading test list...</p>\n      ) : (\n        <TestListView test_list={testList} />\n      )}\n    </>\n  );\n}\n\nexport default TestList;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,kCAAkC;AACzC,OAAOC,YAAY,MAAM,sBAAsB;AAC/C,OAAOC,kBAAkB,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAExD,SAASC,QAAQA,CAAA,EAAG;EAAAC,GAAA;EAAA,IAAAC,EAAA,GAAAC,YAAA;EAClB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMgB,aAAa,GAAG,MAAAA,CAAA,KAAY;IAAAN,EAAA;IAChC,IAAI;MACF,MAAMO,eAAe,GAAG,MAAMd,kBAAkB,CAAC,CAAC;MAClDY,WAAW,CAACE,eAAe,CAAC;MAC5BJ,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD;EACF,CAAC;EAACR,EAAA,CARIM,aAAa;IAAA,QAEeb,kBAAkB;EAAA;EAQpDF,SAAS,CAAC,MAAM;IACde,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEX,OAAA,CAAAE,SAAA;IAAAa,QAAA,EACGR,OAAO,gBACNP,OAAA;MAAAe,QAAA,EAAG;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAE3BnB,OAAA,CAACH,YAAY;MAACuB,SAAS,EAAEX;IAAS;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EACrC,gBACD,CAAC;AAEP;AAACf,GAAA,CA3BQD,QAAQ;AAAAkB,EAAA,GAARlB,QAAQ;AA6BjB,eAAeA,QAAQ;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}