{"ast":null,"code":"var _jsxFileName = \"/Users/nehaljhajharia/Desktop/Chikitsa/chikitsa_frontend/src/TestList.js\",\n  _s = $RefreshSig$();\n// TestList.js\nimport React, { useState, useEffect, useContext } from 'react';\nimport { Button, Modal } from 'react-bootstrap';\nimport UrlContext from './context/UrlContext';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport loadUserData from './local-data/UserGet';\nimport TestListView from './views/TestListView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TestList() {\n  _s();\n  const [testList, setTestList] = useState([]);\n  const [testName, setTestName] = useState('');\n  const [allTests, setAllTests] = useState([]);\n  const [appointmentId, setAppointmentId] = useState('');\n  const [date, setDate] = useState('');\n  const [remarks, setRemarks] = useState('');\n  const user = loadUserData();\n  const url = useContext(UrlContext);\n  const testListUrl = url + 'api/patient/get/all-tests/?patient_id=';\n  const user_uri_create = url + 'api/patient/create/test/';\n  const user_uri_master = url + 'api/master/get/all-tests/';\n  const [show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  //fetching test list for patient\n  useEffect(() => {\n    fetchTestList();\n  }, []);\n  const fetchTestList = async () => {\n    try {\n      const response = await fetch(`${testListUrl}${user.id}`);\n      if (response.ok) {\n        const jsonData = await response.json();\n        const key = Object.keys(jsonData)[0];\n        setTestList(jsonData[key]);\n      } else {\n        console.error('Error fetching test list:', response.status);\n      }\n    } catch (error) {\n      console.error('Error fetching test list:', error);\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append('appointment_id', appointmentId);\n    formData.append('test_master_id', testName);\n    formData.append('date', date);\n    formData.append('remarks', remarks);\n\n    // Send the data to the server\n    try {\n      const response = await fetch(`${user_uri_create}`, {\n        method: 'POST',\n        body: formData\n      });\n      if (response.ok) {\n        console.log('Test created successfully');\n        fetchTestList();\n      } else {\n        console.log('Failed to create test');\n      }\n    } catch (error) {\n      console.error('Error creating test:', error);\n    }\n    handleClose();\n  };\n\n  //access master of tests\n  useEffect(() => {\n    fetchTestMaster();\n  }, []);\n  const fetchTestMaster = async () => {\n    try {\n      const response = await fetch(`${user_uri_master}`);\n      if (response.ok) {\n        const jsonData = await response.json();\n        setAllTests(jsonData);\n        console.log(allTests);\n      } else {\n        console.error('Error fetching tests master list:', response.status);\n      }\n    } catch (error) {\n      console.error('Error fetching tests master list:', error);\n    }\n  };\n  return (\n    /*#__PURE__*/\n    // <div>\n    //   <h2 className='mt-3 text-center'>Test List</h2>\n    //   <table className='table table-sm'>\n    //   <tbody>\n    //     <tr>\n    //       <th>Appointment</th>\n    //       <th>Test</th>\n    //       <th>Date</th>\n    //       <th>Remarks</th>\n    //       <th>Details</th>\n    //     </tr>\n    //     {testList.map((item)=>(\n    //       <tr key={item.id}>\n    //         <td>{item.appointment}</td>\n    //         <td>{item.name}</td>\n    //         <td>{item.date}</td>\n    //         <td>{item.remarks}</td>\n    //         <td>{item.details}</td>\n    //       </tr>\n    //     ))}\n    //   </tbody>\n    //   </table>\n    //   <button onClick={handleShow} className='mt-3 w-100 mx-auto' style={{position:'relative',}}>Add Test</button>\n    //   <Modal size=\"lg\" show={show} onHide={handleClose}>\n    //     <Modal.Header closeButton>\n    //       <Modal.Title><strong>Create Test</strong></Modal.Title>\n    //     </Modal.Header>\n    //     <Modal.Body>\n    //       <div>\n    //         <form onSubmit={handleSubmit}>\n    //           <label htmlFor=\"appointmentId\">Appointment ID</label>\n    //           <input\n    //             type=\"text\"\n    //             id=\"appointmentId\"\n    //             value={appointmentId}\n    //             onChange={(e) => setAppointmentId(e.target.value)}\n    //             required\n    //           />\n    //           <label htmlFor=\"name\">Test</label>\n    //           <select\n    //             id=\"testName\"\n    //             value={testName}\n    //             onChange={(e) => setTestName(e.target.value)}\n    //           >\n    //             <option value=\"\">Select a test</option>\n    //             {allTests.map((test) => (\n    //               <option key={test.id} value={test.id}>\n    //                 {test.name}\n    //               </option>\n    //             ))}\n    //           </select>\n    //           <label htmlFor=\"date\">Date</label>\n    //           <input\n    //             type=\"date\"\n    //             id=\"date\"\n    //             value={date}\n    //             onChange={(e) => setDate(e.target.value)}\n    //             required\n    //           />\n    //           <label htmlFor=\"remarks\">Remarks</label>\n    //           <textarea\n    //             id=\"remarks\"\n    //             value={remarks}\n    //             onChange={(e) => setRemarks(e.target.value)}\n    //           ></textarea>\n    //           <button className='mt-4' type=\"submit\">Submit</button>\n    //         </form>\n    //       </div>\n    //     </Modal.Body>\n    //   </Modal>\n    // </div>\n    _jsxDEV(TestListView, {\n      test_list: testList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(TestList, \"S4A7VuNYLJ7/inawH1kXfKf/0CE=\");\n_c = TestList;\nexport default TestList;\nvar _c;\n$RefreshReg$(_c, \"TestList\");","map":{"version":3,"names":["React","useState","useEffect","useContext","Button","Modal","UrlContext","loadUserData","TestListView","jsxDEV","_jsxDEV","TestList","_s","testList","setTestList","testName","setTestName","allTests","setAllTests","appointmentId","setAppointmentId","date","setDate","remarks","setRemarks","user","url","testListUrl","user_uri_create","user_uri_master","show","setShow","handleClose","handleShow","fetchTestList","response","fetch","id","ok","jsonData","json","key","Object","keys","console","error","status","handleSubmit","e","preventDefault","formData","FormData","append","method","body","log","fetchTestMaster","test_list","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/nehaljhajharia/Desktop/Chikitsa/chikitsa_frontend/src/TestList.js"],"sourcesContent":["// TestList.js\nimport React, { useState, useEffect, useContext } from 'react';\nimport { Button, Modal } from 'react-bootstrap';\nimport UrlContext from './context/UrlContext';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport loadUserData from './local-data/UserGet';\nimport TestListView from './views/TestListView';\n\n\nfunction TestList() {\n  const [testList, setTestList] = useState([]);\n  const [testName , setTestName] = useState('');\n  const [allTests, setAllTests] = useState([]);\n  const [appointmentId, setAppointmentId] = useState('');\n  const [date, setDate] = useState('');\n  const [remarks, setRemarks] = useState('');\n  const user = loadUserData();\n  const url = useContext(UrlContext);\n  const testListUrl = url + 'api/patient/get/all-tests/?patient_id=';\n  const user_uri_create = url + 'api/patient/create/test/';\n  const user_uri_master = url + 'api/master/get/all-tests/';\n\n  const [show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n\n  //fetching test list for patient\n  useEffect(() => {\n    fetchTestList();\n  }, []);\n\n  const fetchTestList = async () => {\n    try {\n      const response = await fetch(`${testListUrl}${user.id}`);\n      if (response.ok) {\n        const jsonData = await response.json();\n        const key = Object.keys(jsonData)[0]\n        setTestList(jsonData[key]);\n      } else {\n        console.error('Error fetching test list:', response.status);\n      }\n    } catch (error) {\n      console.error('Error fetching test list:', error);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const formData = new FormData();\n    formData.append('appointment_id', appointmentId);\n    formData.append('test_master_id', testName);\n    formData.append('date', date);\n    formData.append('remarks', remarks);\n\n    // Send the data to the server\n    try {\n      const response = await fetch(`${user_uri_create}`, {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (response.ok) {\n        console.log('Test created successfully');\n        fetchTestList();\n      } else {\n        console.log('Failed to create test');\n      }\n    } catch (error) {\n      console.error('Error creating test:', error);\n    }\n    handleClose();\n  };\n\n    //access master of tests\n    useEffect(() => {\n      fetchTestMaster();\n    }, []);\n    const fetchTestMaster = async () => {\n      try {\n        const response = await fetch(`${user_uri_master}`);\n        if (response.ok) {\n          const jsonData = await response.json();\n          setAllTests(jsonData);\n          console.log(allTests);\n        } else {\n          console.error('Error fetching tests master list:', response.status);\n        }\n      } catch (error) {\n        console.error('Error fetching tests master list:', error);\n      }\n    };\n\n  return (\n    // <div>\n    //   <h2 className='mt-3 text-center'>Test List</h2>\n    //   <table className='table table-sm'>\n    //   <tbody>\n    //     <tr>\n    //       <th>Appointment</th>\n    //       <th>Test</th>\n    //       <th>Date</th>\n    //       <th>Remarks</th>\n    //       <th>Details</th>\n    //     </tr>\n    //     {testList.map((item)=>(\n    //       <tr key={item.id}>\n    //         <td>{item.appointment}</td>\n    //         <td>{item.name}</td>\n    //         <td>{item.date}</td>\n    //         <td>{item.remarks}</td>\n    //         <td>{item.details}</td>\n    //       </tr>\n    //     ))}\n    //   </tbody>\n    //   </table>\n      \n    //   <button onClick={handleShow} className='mt-3 w-100 mx-auto' style={{position:'relative',}}>Add Test</button>\n\n    //   <Modal size=\"lg\" show={show} onHide={handleClose}>\n    //     <Modal.Header closeButton>\n    //       <Modal.Title><strong>Create Test</strong></Modal.Title>\n    //     </Modal.Header>\n\n    //     <Modal.Body>\n    //       <div>\n    //         <form onSubmit={handleSubmit}>\n    //           <label htmlFor=\"appointmentId\">Appointment ID</label>\n    //           <input\n    //             type=\"text\"\n    //             id=\"appointmentId\"\n    //             value={appointmentId}\n    //             onChange={(e) => setAppointmentId(e.target.value)}\n    //             required\n    //           />\n\n    //           <label htmlFor=\"name\">Test</label>\n    //           <select\n    //             id=\"testName\"\n    //             value={testName}\n    //             onChange={(e) => setTestName(e.target.value)}\n    //           >\n    //             <option value=\"\">Select a test</option>\n    //             {allTests.map((test) => (\n    //               <option key={test.id} value={test.id}>\n    //                 {test.name}\n    //               </option>\n    //             ))}\n    //           </select>\n\n    //           <label htmlFor=\"date\">Date</label>\n    //           <input\n    //             type=\"date\"\n    //             id=\"date\"\n    //             value={date}\n    //             onChange={(e) => setDate(e.target.value)}\n    //             required\n    //           />\n\n    //           <label htmlFor=\"remarks\">Remarks</label>\n    //           <textarea\n    //             id=\"remarks\"\n    //             value={remarks}\n    //             onChange={(e) => setRemarks(e.target.value)}\n    //           ></textarea>\n\n    //           <button className='mt-4' type=\"submit\">Submit</button>\n    //         </form>\n    //       </div>\n    //     </Modal.Body>\n    //   </Modal>\n    // </div>\n    <TestListView test_list={testList}/>\n  );\n}\n\nexport default TestList;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAC9D,SAASC,MAAM,EAAEC,KAAK,QAAQ,iBAAiB;AAC/C,OAAOC,UAAU,MAAM,sBAAsB;AAC7C,OAAO,kCAAkC;AACzC,OAAOC,YAAY,MAAM,sBAAsB;AAC/C,OAAOC,YAAY,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGhD,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACc,QAAQ,EAAGC,WAAW,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC7C,MAAM,CAACgB,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACkB,aAAa,EAAEC,gBAAgB,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACoB,IAAI,EAAEC,OAAO,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACsB,OAAO,EAAEC,UAAU,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAMwB,IAAI,GAAGlB,YAAY,CAAC,CAAC;EAC3B,MAAMmB,GAAG,GAAGvB,UAAU,CAACG,UAAU,CAAC;EAClC,MAAMqB,WAAW,GAAGD,GAAG,GAAG,wCAAwC;EAClE,MAAME,eAAe,GAAGF,GAAG,GAAG,0BAA0B;EACxD,MAAMG,eAAe,GAAGH,GAAG,GAAG,2BAA2B;EAEzD,MAAM,CAACI,IAAI,EAAEC,OAAO,CAAC,GAAG9B,QAAQ,CAAC,KAAK,CAAC;EACvC,MAAM+B,WAAW,GAAGA,CAAA,KAAMD,OAAO,CAAC,KAAK,CAAC;EACxC,MAAME,UAAU,GAAGA,CAAA,KAAMF,OAAO,CAAC,IAAI,CAAC;;EAGtC;EACA7B,SAAS,CAAC,MAAM;IACdgC,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAET,WAAY,GAAEF,IAAI,CAACY,EAAG,EAAC,CAAC;MACxD,IAAIF,QAAQ,CAACG,EAAE,EAAE;QACf,MAAMC,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QACtC,MAAMC,GAAG,GAAGC,MAAM,CAACC,IAAI,CAACJ,QAAQ,CAAC,CAAC,CAAC,CAAC;QACpCzB,WAAW,CAACyB,QAAQ,CAACE,GAAG,CAAC,CAAC;MAC5B,CAAC,MAAM;QACLG,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEV,QAAQ,CAACW,MAAM,CAAC;MAC7D;IACF,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD;EACF,CAAC;EAED,MAAME,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,gBAAgB,EAAEjC,aAAa,CAAC;IAChD+B,QAAQ,CAACE,MAAM,CAAC,gBAAgB,EAAErC,QAAQ,CAAC;IAC3CmC,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAE/B,IAAI,CAAC;IAC7B6B,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAE7B,OAAO,CAAC;;IAEnC;IACA,IAAI;MACF,MAAMY,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAER,eAAgB,EAAC,EAAE;QACjDyB,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEJ;MACR,CAAC,CAAC;MAEF,IAAIf,QAAQ,CAACG,EAAE,EAAE;QACfM,OAAO,CAACW,GAAG,CAAC,2BAA2B,CAAC;QACxCrB,aAAa,CAAC,CAAC;MACjB,CAAC,MAAM;QACLU,OAAO,CAACW,GAAG,CAAC,uBAAuB,CAAC;MACtC;IACF,CAAC,CAAC,OAAOV,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;IACAb,WAAW,CAAC,CAAC;EACf,CAAC;;EAEC;EACA9B,SAAS,CAAC,MAAM;IACdsD,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EACN,MAAMA,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI;MACF,MAAMrB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEP,eAAgB,EAAC,CAAC;MAClD,IAAIM,QAAQ,CAACG,EAAE,EAAE;QACf,MAAMC,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QACtCtB,WAAW,CAACqB,QAAQ,CAAC;QACrBK,OAAO,CAACW,GAAG,CAACtC,QAAQ,CAAC;MACvB,CAAC,MAAM;QACL2B,OAAO,CAACC,KAAK,CAAC,mCAAmC,EAAEV,QAAQ,CAACW,MAAM,CAAC;MACrE;IACF,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IAC3D;EACF,CAAC;EAEH;IAAA;IACE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IAEA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACAnC,OAAA,CAACF,YAAY;MAACiD,SAAS,EAAE5C;IAAS;MAAA6C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC;EAAC;AAExC;AAACjD,EAAA,CAtKQD,QAAQ;AAAAmD,EAAA,GAARnD,QAAQ;AAwKjB,eAAeA,QAAQ;AAAC,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}